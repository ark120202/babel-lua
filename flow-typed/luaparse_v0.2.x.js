// flow-typed signature: c9c46da160476ad94abf669dba1b3505
// flow-typed version: <<STUB>>/luaparse_v0.2.1/flow_v0.59.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'luaparse'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'luaparse' {
  declare interface SourceLocation {
    start: {
      line: number,
      column: number,
    };

    end: {
      line: number,
      column: number,
    };

    // Not standard, required to support sourcemaps
    filename?: string;
  }

  declare interface LuaNode {
    [key: string]: any;
    type: string;
    body: Object;
    loc?: SourceLocation;
    _compact?: boolean;
  }

  declare interface LuaparseOptions {
    wait?: boolean;
    comments?: boolean;
    scope?: boolean;
    locations?: boolean;
    ranges?: boolean;
    onCreateNode?: (node: LuaNode) => void;
    onCreateScope?: () => void;
    onDestroyScope?: () => void;
    onLocalDeclaration?: (identifier: LuaNode) => void;
    luaVersion?: '5.1' | '5.2' | '5.3';
    extendedIdentifiers?: boolean;
  }

  declare module.exports: {
    tokenTypes: {
      EOF: number,
      StringLiteral: number,
      Keyword: number,
      Identifier: number,
      NumericLiteral: number,
      Punctuator: number,
      BooleanLiteral: number,
      NilLiteral: number,
      VarargLiteral: number,
    },

    errors: {
      unexpected: string,
      expected: string,
      expectedToken: string,
      unfinishedString: string,
      malformedNumber: string,
      invalidVar: string,
      decimalEscapeTooLarge: string,
      invalidEscape: string,
      hexadecimalDigitExpected: string,
      braceExpected: string,
      tooLargeCodepoint: string,
      unfinishedLongString: string,
      unfinishedLongComment: string,
    },

    ast: {
      labelStatement(label: string): LuaNode,
      breakStatement(): LuaNode,
      gotoStatement(label: string): LuaNode,
      returnStatement(args: LuaNode[]): LuaNode,
      ifStatement(clauses: LuaNode[]): LuaNode,
      ifClause(condition: LuaNode, body: LuaNode[]): LuaNode,
      elseifClause(condition: LuaNode, body: LuaNode[]): LuaNode,
      elseClause(body: LuaNode[]): LuaNode,
      whileStatement(condition: LuaNode, body: LuaNode[]): LuaNode,
      doStatement(body: LuaNode[]): LuaNode,
      repeatStatement(condition: LuaNode, body: LuaNode[]): LuaNode,
      localStatement(variables: LuaNode[], init: LuaNode[]): LuaNode,
      assignmentStatement(variables: LuaNode[], init: LuaNode[]): LuaNode,
      callStatement(expression: LuaNode): LuaNode,
      functionStatement(
        identifier: ?LuaNode,
        parameters: LuaNode[],
        isLocal: boolean,
        body: LuaNode[],
      ): LuaNode,
      forNumericStatement(
        variable: LuaNode,
        start: LuaNode,
        end: LuaNode,
        step: ?LuaNode,
        body: LuaNode[],
      ): LuaNode,
      forGenericStatement(variables: LuaNode[], iterators: LuaNode[], body: LuaNode[]): LuaNode,
      chunk(body: LuaNode[]): LuaNode,
      identifier(name: string): LuaNode,
      literal(type: number, value?: string | number | boolean | null, raw?: string): LuaNode,
      tableKey(key: LuaNode, value: LuaNode): LuaNode,
      tableKeyString(key: LuaNode, value: LuaNode): LuaNode,
      tableValue(value: LuaNode): LuaNode,
      tableConstructorExpression(fields: LuaNode[]): LuaNode,
      binaryExpression(
        operator: | 'or'
        | 'and'
        | '<'
        | '>'
        | '<='
        | '>='
        | '~='
        | '=='
        | '|'
        | '~'
        | '&'
        | '<<'
        | '>>'
        | '..'
        | '+'
        | '-'
        | '*'
        | '/'
        | '//'
        | '%'
        | '^',
        left: LuaNode,
        right: LuaNode,
      ): LuaNode,
      unaryExpression(operator: 'not' | '#' | '-' | '~', argument: LuaNode): LuaNode,
      memberExpression(base: LuaNode, indexer: '.' | ':', identifier: LuaNode): LuaNode,
      indexExpression(base: LuaNode, index: LuaNode): LuaNode,
      callExpression(base: LuaNode, args: LuaNode[]): LuaNode,
      tableCallExpression(base: LuaNode, args: LuaNode[]): LuaNode,
      stringCallExpression(base: LuaNode, args: LuaNode[]): LuaNode,
      comment(value: string, raw?: string): LuaNode,
    },
    parse(input: string, options: LuaparseOptions): LuaNode,
  };
}

// Filename aliases
declare module 'luaparse/luaparse' {
  declare module.exports: $Exports<'luaparse'>;
}

declare module 'luaparse/luaparse.js' {
  declare module.exports: $Exports<'luaparse'>;
}
