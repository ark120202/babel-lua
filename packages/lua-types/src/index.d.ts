import * as luaparse from 'luaparse';

export const types: string[];

export type isCheck = (node: luaparse.LuaNode) => boolean;
export const isLabelStatement: isCheck;
export const isBreakStatement: isCheck;
export const isGotoStatement: isCheck;
export const isReturnStatement: isCheck;
export const isIfStatement: isCheck;
export const isIfClause: isCheck;
export const isElseifClause: isCheck;
export const isElseClause: isCheck;
export const isWhileStatement: isCheck;
export const isDoStatement: isCheck;
export const isRepeatStatement: isCheck;
export const isLocalStatement: isCheck;
export const isAssignmentStatement: isCheck;
export const isCallStatement: isCheck;
export const isFunctionDeclaration: isCheck;
export const isForNumericStatement: isCheck;
export const isForGenericStatement: isCheck;
export const isChunk: isCheck;
export const isIdentifier: isCheck;
export const isStringLiteral: isCheck;
export const isNumericLiteral: isCheck;
export const isBooleanLiteral: isCheck;
export const isNilLiteral: isCheck;
export const isVarargLiteral: isCheck;
export const isTableKey: isCheck;
export const isTableKeyString: isCheck;
export const isTableValue: isCheck;
export const isTableConstructorExpression: isCheck;
export const isLogicalExpression: isCheck;
export const isBinaryExpression: isCheck;
export const isUnaryExpression: isCheck;
export const isMemberExpression: isCheck;
export const isIndexExpression: isCheck;
export const isCallExpression: isCheck;
export const isTableCallExpression: isCheck;
export const isStringCallExpression: isCheck;
export const isComment: isCheck;
export const isLuaRaw: isCheck;
export const isBinary: isCheck;
export const isConditional: isCheck;

export const tokenTypes: typeof luaparse.tokenTypes;

export const labelStatement: typeof luaparse.ast.labelStatement;
export const breakStatement: typeof luaparse.ast.breakStatement;
export const gotoStatement: typeof luaparse.ast.gotoStatement;
export const returnStatement: typeof luaparse.ast.returnStatement;
export const ifStatement: typeof luaparse.ast.ifStatement;
export const ifClause: typeof luaparse.ast.ifClause;
export const elseifClause: typeof luaparse.ast.elseifClause;
export const elseClause: typeof luaparse.ast.elseClause;
export const whileStatement: typeof luaparse.ast.whileStatement;
export const doStatement: typeof luaparse.ast.doStatement;
export const repeatStatement: typeof luaparse.ast.repeatStatement;
export const localStatement: typeof luaparse.ast.localStatement;
export const assignmentStatement: typeof luaparse.ast.assignmentStatement;
export const callStatement: typeof luaparse.ast.callStatement;
export const functionStatement: typeof luaparse.ast.functionStatement;
export const forNumericStatement: typeof luaparse.ast.forNumericStatement;
export const forGenericStatement: typeof luaparse.ast.forGenericStatement;
export const chunk: typeof luaparse.ast.chunk;
export const identifier: typeof luaparse.ast.identifier;
export const literal: typeof luaparse.ast.literal;
export const tableKey: typeof luaparse.ast.tableKey;
export const tableKeyString: typeof luaparse.ast.tableKeyString;
export const tableValue: typeof luaparse.ast.tableValue;
export const tableConstructorExpression: typeof luaparse.ast.tableConstructorExpression;
export const binaryExpression: typeof luaparse.ast.binaryExpression;
export const unaryExpression: typeof luaparse.ast.unaryExpression;
export const memberExpression: typeof luaparse.ast.memberExpression;
export const indexExpression: typeof luaparse.ast.indexExpression;
export const callExpression: typeof luaparse.ast.callExpression;
export const tableCallExpression: typeof luaparse.ast.tableCallExpression;
export const stringCallExpression: typeof luaparse.ast.stringCallExpression;
export const comment: typeof luaparse.ast.comment;
export function luaRaw(code: string): luaparse.LuaNode;
export function stringLiteral(value: string, raw?: string): luaparse.LuaNode;
export function numericLiteral(value: number, raw?: string): luaparse.LuaNode;
export function booleanLiteral(value: boolean, raw?: string): luaparse.LuaNode;
export function nilLiteral(): luaparse.LuaNode;
export function varargLiteral(): luaparse.LuaNode;
